"""Module to store functions about local parsers arguments."""
import argparse

def local_parses():
    """Function to create and retorn all the local parsers arguments.

    Returns
    -------
    argparse
        Object with parsers and its values.
    """    
    parser = argparse.ArgumentParser(description='Execute taxam.', usage='python .\execTaxam.py -tl 3 -fp "folder_test" -op "test_01 -fu 2',)

    parser.add_argument('-tl', '--tax_level', help = 'Level of taxonomy to use. Taxonomy levels: 1-Kingdom, 2-Phylum, 3-Class, 4-Order, 5-Family, 6-Genus, 7-Species. Default: 1.',type = int, action = 'store', default = 1, choices = [int(i) for i in range(1, 8)])

    parser.add_argument('-fp', '--folder_path', help = 'Folder where are the file to be used.', type = str, action = 'store', default = None)

    parser.add_argument('-rs', '--reads_sep', help = 'Separator used to part each collumn in read file.', type = str, action = 'store', default = r'\t')

    parser.add_argument('-cs', '--contigs_sep', help = 'Separator used to part each collumn in contigs file.', type = str, action = 'store', default = r'\t')

    parser.add_argument('-ms', '--mapping_sep', help = 'Separator used to part each collumn in mapping file.', type = str, action = 'store', default = r'\t')

    parser.add_argument('-os', '--output_sep', help = 'Separator used to part each collumn in output file generated by TaxAM.', type = str, action = 'store', default = '\t')

    parser.add_argument('-op', '--output_name', help = 'Name of output file.', type = str, action = 'store', default = 'tx_matrix')

    parser.add_argument('-fu', '--file_to_use', help = 'In case of conflict, which file to be used .1-Reads, 2-Contigs, 3-No one. Default : 3.', type = int, action = 'store', default = 3, choices = [int(i) for i in range(1, 4)])

    parser.add_argument('-th', '--thread_number', help = 'Number of threads to be used.', type = int, action = 'store', default = 1)

    parser.add_argument('-mm', '--matrix_mode', help = 'Mode to create the matrix. 1 - Absolute, 2 - Relative.', type = int, action = 'store', default = 1, choices=[1,2])

    parser.add_argument('-rq', '--reads_quantity', help = 'Quantity of reads for each sample. If there are 3 samples: spa, spb, spc, use spa:100,spb:150,spc:275 that is 100 reads for spa, 150 reads for spb, 275 reads for spc. If you want that program calculate automatically for specific sample, informe as 0, for instance spa:0,spb:125,spc:0 that is 0 reads for spa, 125 reads for spb, 0 reads for spc ', type = str, action = 'store', default = None)

    return parser.parse_args()