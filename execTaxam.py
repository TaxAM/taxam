from threading import Thread
from util import *
import os, argparse

parse = argparse.ArgumentParser(description='Execute taxam\nOTA LINHA', usage='python .\execTaxam.py -tl 3 -fp "folder_test" -op "test_01.taxam" -fu 2',)
parse.add_argument('-tl', '--tax_level', help = 'Level of taxonomy to use',type = int, action = 'store', default = 1, choices = [int(i) for i in range(1, 10)])

parse.add_argument('-fp', '--folder_path', help = 'Folder where are the file to be used', type = str, action = 'store', default = None)

parse.add_argument('-rs', '--reads_sep', help = 'Separator used to part each collumn in read file', type = str, action = 'store', default = r'\t')

parse.add_argument('-cs', '--contigs_sep', help = 'Separator used to part each collumn in contigs file', type = str, action = 'store', default = r'\t')

parse.add_argument('-ms', '--mapping_sep', help = 'Separator used to part each collumn in mapping file', type = str, action = 'store', default = r'\t')

parse.add_argument('-os', '--output_sep', help = 'Separator used to part each collumn in output file generated by TaxAM', type = str, action = 'store', default = r'\t')

parse.add_argument('-op', '--output_name', help = 'Name of output file', type = str, action = 'store', default = 'taxam_matrix')

parse.add_argument('-fu', '--file_to_use', help = 'In case of conflict, which file to be used .1 - reads, 2 - contigs, 3 - no one', type = str, action = 'store', default = 3)

args = parse.parse_args()

type_files = ['reads', 'contigs', 'mapping']
terminal = args.__dict__.copy()
print(terminal)

# SEEING IF THIS DIRECTORY EXISTS
if(os.path.isdir(f'{terminal["folder_path"]}/')) and terminal['folder_path'] != None:
    files = sorted(os.listdir(terminal['folder_path']))
else:
    sys.exit('This directory doesnt exists')

file_names = {}
type, key = 'None', 'None'
wrong_files = ''
for file in files:
    if len(file.split('_')) == 2:    
        type = getPrefix(file, '_')
        key = getSuffix(file, '_')
        if type in type_files:
            try:
                file_names[key][type] = terminal['folder_path'] + '/' + file
            except:
                file_names[key] = {type : terminal['folder_path'] + '/' + file}
        else:
            wrong_files += file + '\n'
    else:
        wrong_files += file + '\n'
    type, key = 'None', 'None'

# SEEING IF EACH FILE IS WRITTEN IN OUR PROTOCOL
if wrong_files != '':
    print('\nBad files:\n' + wrong_files)
    sys.exit('''
    You used bad files. Your files should be:

    reads_<read_id>.tax
    contigs_<contigs_id>.tax
    mapping_<mapping_id>.mp
    ''')

# SEEING IF NUMBER OF FILES IS CORRECT FOR EACH GROUP
wrong_files = ''
for name, file in file_names.items():
    if sorted(list(file.keys())) != ['contigs', 'mapping'] and sorted(list(file.keys())) != ['contigs', 'mapping', 'reads']:
        wrong_files += name + ' has [' + ', '.join(list(sorted(file.keys()))) + ']. It should have [contigs, mapping] or [contigs, mapping, reads]\n'

if wrong_files != '':
    sys.exit('\nBad material:\n' + wrong_files)

# CREATING PARAMETERS TO PASS FOR THREADS FOR execTaxam FUNCTION
box = []
my_args = []
for key, value in file_names.items():
    box.append(terminal['tax_level'])
    for type in type_files:
        if type in value.keys():
            box.append(value[type])
        else:
            box.append(None)
    box.append(terminal['reads_sep'])
    box.append(terminal['contigs_sep'])
    box.append(terminal['mapping_sep'])
    box.append(terminal['output_sep'])
    box.append(terminal['output_name'])
    box.append(terminal['file_to_use'])
    my_args.append(box[:])
    box.clear()

print(my_args)